To run your Flask application in a Docker container, you need to create a Dockerfile and possibly a `requirements.txt` file if you don't already have one. The Dockerfile is a text document that contains all the commands a user could call on the command line to assemble an image. Here's how you can do it:

1. **Create a `requirements.txt` file**: This file will list all the Python packages that your app depends on. Given your script, your `requirements.txt` might look something like this:

   ```
   Flask
   requests
   plotly
   ```

2. **Create a Dockerfile**: This file will define the Docker image and how your application runs inside a container. Here's a simple Dockerfile for your application:

   ```Dockerfile
   # Use an official Python runtime as a parent image
   FROM python:3.8-slim

   # Set the working directory in the container
   WORKDIR /usr/src/app

   # Copy the current directory contents into the container at /usr/src/app
   COPY . .

   # Install any needed packages specified in requirements.txt
   RUN pip install --no-cache-dir -r requirements.txt

   # Make port 5000 available to the world outside this container
   EXPOSE 5000

   # Define environment variable
   ENV NAME World

   # Run app.py when the container launches
   CMD ["python", "./app.py"]
   ```

   Replace `app.py` with the name of your main Python script if it's different.

3. **Build your Docker image**:
   - Navigate to the directory that has your Dockerfile and run the following command in your terminal:
     ```
     docker build -t my-flask-app .
     ```
     This command builds the Docker image and tags it as `my-flask-app`.

4. **Run the Docker container**:
   - After the image is built, you can run it with:
     ```
     docker run -p 4000:5000 my-flask-app
     ```
     This command maps port 5000 of the container to port 4000 on your host system.

5. **Access your app**:
   - Now, your Flask application should be running on `http://localhost:4000`. You can access it using your web browser.

Remember to have Docker installed on your machine. If you encounter any issues, they are most likely related to the specifics of your Docker setup or the configuration of your Flask app.
